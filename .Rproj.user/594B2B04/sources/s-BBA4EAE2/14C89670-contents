expMetricUI <- function(id) {
  ns <- NS(id)
  selectInput(ns("checkExp"),
              label = "Co-expression metric:",
              choices = list("Soft Cosine"="soft_cos", "Distance (Smoothed)"="smoothed_dist", "Cosine"="cos_dist"),
              selected = c("soft_cos"), multiple = F)
  # radioButtons(ns("checkExp"), label = h4("Select co-expression metric:"), 
  #              choices = list("Soft Cosine"="soft_cos", "Distance (Smoothed)"="smoothed_dist"),
  #              selected = c("soft_cos"),inline = T)
}

expMetric <- function(input, output, session) {
  return(reactive(input$checkExp))
}

linkageUI <- function(id) {
  ns <- NS(id)
  selectInput(ns("selLink"),
              label = "HC linkage:",
              choices = list("complete"="complete", "ward"="ward.D2"),
              selected = c("complete"), multiple = F)
}

linkage <- function(input, output, session) {
  return(reactive(input$selLink))
}

externalGroupUI <- function(id) {
  ns <- NS(id)
  checkboxGroupInput(ns("checkAnno"), label = "Select annotations:",
                     choices = list("HuMap" = "HuMap","GO" = "GO", "HGNC" = "HGNC", "Interpro domain" = "Interpro", "Reactome"="Reactome",
                                    "String"="combined_score", "String.less"="combined_less", "String.more"="combined_more"), 
                     selected = c("HuMap", "Interpro", "HGNC","Reactome"),inline = T)
  #"String_fusion"="fusion", "String_cooccurence"="cooccurence","String_experiments"="experiments", "String_experiments_transferred"="experiments_transferred","String_database"="database", "String_database_transferred"="database_transferred"
}

externalGroup <- function(input, output, session) { #modify such that GO, HGNC -> GO+HGNC ?)
  return(reactive(input$checkAnno))
}

score_metricUI <- function(id, exp, anno, logi) {
  ns <- NS(id)
  fluidRow(
    selectInput(ns("checkAnno"), label = "Annotation:", 
                choices = anno, selected = NULL,inline = T),
    selectInput(ns("checkLogi"), label = "Combination logic:", 
                choices = logi, selected = NULL,inline = T),
    selectInput(ns("checkExp"), label = "Expression similarity:", 
                choices = exp, selected = NULL,inline = T)
    
  )
}

score_metric <- function(input, output, session) { #modify such that GO, HGNC -> GO+HGNC ?)
  ## returns the correct combined metric
  if(is.null(input$checkAnno)&is.null(input$checkExp)){
    return(NULL)
  }else if(!is.null(input$checkAnno)&!is.null(input$checkExp)){
    if(is.null(input$checkLogi)){
      return(NULL)
    }else{
      return(reactiveValues(anno=input$checkAnno,exp=input$checkExp,
                            combined=paste0(c(input$checkAnno,input$checkLogi,input$checkExp),collapse = ":")))
    }
  }else{
    if(!is.null(input$checkAnno)){
      return(reactiveValues(anno=input$checkAnno,exp=NULL,
                            combined=NULL))
    }else{
      return(reactiveValues(anno=NULL,exp=input$checkExp,
                            combined=NULL))
    }
  }
}

geneSelectPanelUI <- function(id, links.use) {
  ns <-NS(id)
  wellPanel(
    selectInput(ns("single_node_id"),
                label = "Choose gene(s) from list:",
                choices = c(dimnames(links.use)[[1]]), multiple = T, selected=NULL),
    # pickerInput(ns("single_node_id"),
    #             label = "Choose gene(s) from list:",
    #             choices = c(dimnames(links.use)[[1]]), multiple = T, selected=NULL, 
    #             options = list('actions-box' = T, 'live-search'=T, 'dropup-auto'=F, 'hide-disabled'=T)),
    h4("Or type in comma separated genes and hit 'Select':"),
    fluidRow(
      column(8, 
             textAreaInput(ns("multiple_node_id"),
                           label = NULL, value = NULL)),
      column(2,
             actionButton(ns("multi_gene"), "Select")))
  )
}

# ModuleSelectPanelUI <- function(id,curated.modules) {
#   ns <- NS(id)
#   wellPanel(
#     selectInput(ns("module_name"),
#                 label = "Choose module(s) from list:",
#                 choices = names(curated.modules), multiple = T, selected=NULL)
#   )
# }

geneSelect <- function(input, output, session) {
  node_ids <- reactiveValues(nodes = NULL)
  observe({
    node_ids[['nodes']] <- input$single_node_id
  })
  
  observeEvent(input$multi_gene, {
    node_ids_str <- input$multiple_node_id
    node_ids_str=gsub(" ","",node_ids_str)
    node_ids[['nodes']] <- toupper(unlist(strsplit(node_ids_str,",")))
  })
  return(reactive({node_ids[['nodes']]}))
}
# 
# moduleSelect <- function(input, output, session) {
#   module_selected <- reactiveValues(modules = NULL)
#   observe({
#     module_selected[['modules']] <- input$module_name
#   })
#   return(reactive({module_selected[['modules']]}))
# }

autoModuleUI <- function(id){
  ns <- NS(id)
  fluidRow(
    h4("Suggest modules by sub-clustering each co-expression cluster:"),
    column(5,style="padding-right:0px",
           selectInput(ns("graphPar"),
                       label = "Graph partition:",
                       choices = c("components","walktrap","louvain","leiden","infomap","label_prop","spinglass","eigen","optimal", "edge_btw"),selected = "louvain")),
    column(4,style="padding-right:0px",
           numericInput(ns("minGenes"), label="Min #genes:", value=2, min=1, max=100, step=1)),
    column(3, style = "margin: 25px 0px 0px 0px; padding-left:0px", actionBttn(ns("compAutoModule"),icon = icon("magic"), style="fill"))
  )
}

autoModule <- function(input, output, session, HmapR, adjMR){
  # HC_clusters is a named numeric vector
  RVmodules <- reactiveValues(moduleList=NULL)
  HC_clusters <- reactive({HmapR()$Cls})
  adjM <- reactive({adjMR()})
  #observe(print(input$compAutoModule))
  observeEvent(input$compAutoModule, {
    # need sweet alert to confirm rewriting current curation
    minGenes=input$minGenes
    igraphCls=input$graphPar
    modules=list()
    for(i in unique(HC_clusters())){
      genes=names(which(HC_clusters()==i))
      clsTbl=igraph_cls(genes, adjM())
      cls=clsTbl[,igraphCls]
      for(j in unique(cls)){
        if(sum(cls==j)>=minGenes){
          modules[[paste0("auto_",i,"_",j)]]=names(which(cls==j))
        }
      }
    }
    RVmodules$moduleList=modules
  })
  return(reactive(RVmodules$moduleList))
}
# moduleUpdateUI <- function(input, output, session){
#   node_ids <- reactiveValues(nodes = NULL)
#   
# }

clusterSelectUI <- function(id, label) {
  ns <- NS(id)
  selectInput(ns("graph_cluster"),
             label = label,
             choices = c("none","components","walktrap","louvain","infomap","label_prop","leiden"))
}



